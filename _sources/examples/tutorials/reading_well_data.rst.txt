
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/tutorials/reading_well_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_tutorials_reading_well_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_tutorials_reading_well_data.py:


Reading Well Data into Subsurface
=================================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Authors: Miguel de la Varga and Alexander Juestel

.. GENERATED FROM PYTHON SOURCE LINES 8-14

.. code-block:: default


    # This example will get into detail about how we are using `welly` and `striplog` to
    # import borehole data.

    # We start by using pooch to download the dataset into a temp file;








.. GENERATED FROM PYTHON SOURCE LINES 15-31

.. code-block:: default

    import pooch

    from dataclasses import asdict
    import matplotlib.pyplot as plt
    from striplog import Component

    import subsurface as sb
    from subsurface.reader import ReaderFilesHelper
    from subsurface.reader.wells import read_collar, read_survey, read_lith, WellyToSubsurfaceHelper, welly_to_subsurface
    from subsurface.structs.base_structures.common_data_utils import to_netcdf

    base_url = "https://raw.githubusercontent.com/softwareunderground/subsurface/main/tests/data/borehole/"

    data_hash = "55d58e1e1ed22509579d46f736fa5f07f4428c6744bd16dbd919242d14348da7"
    raw_borehole_data_csv = pooch.retrieve(url=base_url + 'kim_ready.csv',
                                           known_hash=data_hash)







.. GENERATED FROM PYTHON SOURCE LINES 32-35

This dataset consist on a csv file containing the following columns: x, y, name, num, z, year, 7,8,9, altitude, base,
formation, top, _top_abs and md. This is a good example of how varied borehole data can be provided. We will
need to be able to extract specific information to construct the `subsurface` object.

.. GENERATED FROM PYTHON SOURCE LINES 35-43

.. code-block:: default


    # To read csv we are using `pandas` but since `pandas.read_csv` has a lot of arguments, we have created some
    # helper classes to facilitate the reading of the data for this specific context. These *Helpers* are just a python
    # data class with a bit of funcitonality for setter and getter.

    # Also since well data sometimes is given in multiple files - for collars, asseys and surveys - we will read those
    # subset of the data into its own `pandas.Dataframe`. Let's start:








.. GENERATED FROM PYTHON SOURCE LINES 44-54

.. code-block:: default


    reading_collars = ReaderFilesHelper(
        file_or_buffer=raw_borehole_data_csv,  # Path to file
        index_col="name",  # Column used as index
        usecols=['x', 'y', 'altitude', "name"]  # Specific columns for collar
    )

    # We can see the fields from the class easily converting it to a dict
    asdict(reading_collars)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'file_or_buffer': '/home/runner/.cache/pooch/7c2d6aa7551f31216f7236d3f9fb70a6-kim_ready.csv', 'usecols': ['x', 'y', 'altitude', 'name'], 'col_names': None, 'drop_cols': None, 'format': '.csv', 'index_map': None, 'columns_map': None, 'additional_reader_kwargs': {}, 'file_or_buffer_type': <class 'str'>, 'index_col': 'name', 'header': 'infer'}



.. GENERATED FROM PYTHON SOURCE LINES 55-57

The rest of fields of ReaderFilesHelper would be used for different .csv configurations. With a `ReaderFilesHelper`
we can use it for specific functions to read the file into pandas:

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default

    collar = read_collar(reading_collars)
    collar






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>x</th>
          <th>y</th>
          <th>altitude</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>KCL12</th>
          <td>303412</td>
          <td>3913997</td>
          <td>108.713287</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>303412</td>
          <td>3913997</td>
          <td>108.713287</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>303412</td>
          <td>3913997</td>
          <td>108.713287</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>303412</td>
          <td>3913997</td>
          <td>108.713287</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>303412</td>
          <td>3913997</td>
          <td>108.713287</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>318982</td>
          <td>3935253</td>
          <td>227.418152</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>318982</td>
          <td>3935253</td>
          <td>227.418152</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>318982</td>
          <td>3935253</td>
          <td>227.418152</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>318982</td>
          <td>3935253</td>
          <td>227.418152</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>318982</td>
          <td>3935253</td>
          <td>227.418152</td>
        </tr>
      </tbody>
    </table>
    <p>721 rows × 3 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 63-64

We do the same for survey and lithologies:

.. GENERATED FROM PYTHON SOURCE LINES 66-75

.. code-block:: default

    survey = read_survey(
        ReaderFilesHelper(
            file_or_buffer=raw_borehole_data_csv,
            index_col="name",
            usecols=["name", "md"]
        )
    )
    survey





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/subsurface/subsurface/subsurface/reader/wells/well_files_reader.py:140: UserWarning: inc and/or azi columns are not present in the file. The boreholes will be straight.
      warnings.warn('inc and/or azi columns are not present in the file.'


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>md</th>
          <th>inc</th>
          <th>azi</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>KCL12</th>
          <td>0.000000</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>1035.597077</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>1652.245636</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>2109.993683</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>2109.984893</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>308.885376</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>601.202972</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>753.114075</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>1197.413513</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>1623.969910</td>
          <td>0</td>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    <p>721 rows × 3 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 76-89

.. code-block:: default

    lith = read_lith(
        ReaderFilesHelper(
            file_or_buffer=raw_borehole_data_csv,
            usecols=['name', 'top', 'base', 'formation'],
            columns_map={'top': 'top',
                         'base': 'base',
                         'formation': 'component lith',
                         }
        )
    )

    lith






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>top</th>
          <th>base</th>
          <th>component lith</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>KCL12</th>
          <td>0.000000</td>
          <td>1035.597077</td>
          <td>topo</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>1035.597077</td>
          <td>1652.245636</td>
          <td>etchegoin</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>1652.245636</td>
          <td>2109.993683</td>
          <td>macoma</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>2109.993683</td>
          <td>2110.003683</td>
          <td>mclure</td>
        </tr>
        <tr>
          <th>KCL12</th>
          <td>2109.984893</td>
          <td>2799.027984</td>
          <td>fruitvale</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>308.885376</td>
          <td>601.202972</td>
          <td>freeman_jewett</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>601.202972</td>
          <td>753.114075</td>
          <td>vedder</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>753.114075</td>
          <td>1197.413513</td>
          <td>cretaceous</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>1197.413513</td>
          <td>1623.969910</td>
          <td>basement</td>
        </tr>
        <tr>
          <th>USLXX</th>
          <td>1623.969910</td>
          <td>1623.979910</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>721 rows × 3 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 90-98

At this point we have all the necessary data in `pandas.Dataframe`. However, to construct a `subsurface.UnstructuredData`
object we are going to need to convert the data to the usual scheme of: *vertex*, *cells*, *vertex_attr* and *cells_attr*.
To do this we will use `welly` and `striplog`

Welly is a family of classes to facilitate the loading, processing, and analysis of subsurface wells and well data,
such as striplogs, formation tops, well log curves, and synthetic seismograms.

The class WellyToSubsurfaceHelper contains the methods to create a welly project and export it to a subsurface data class.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: default

    wts = WellyToSubsurfaceHelper(collar_df=collar, survey_df=survey, lith_df=lith)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The following striplog failed being processed:  []




.. GENERATED FROM PYTHON SOURCE LINES 103-106

In the field p is stored a welly project
(https://github.com/agile-geoscience/welly/blob/master/tutorial/04_Project.ipynb) and we can use it to explore
and visualize properties of each well.

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default

    wts.p






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Index</th><th>UWI</th><th>Data</th><th>Curves</th></tr><tr><td>0</td><td><strong>Ingram13_73</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>1</td><td><strong>Tenneco_Sun11x_31</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>2</td><td><strong>Famosa12_1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>3</td><td><strong>Bergman_Trust1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>4</td><td><strong>11</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>5</td><td><strong>Mobil_Pan_Pet_KCL86_35</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>6</td><td><strong>KCL_G1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>7</td><td><strong>KerncoXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>8</td><td><strong>Kramer1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>9</td><td><strong>Bishop_FeeXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>10</td><td><strong>Union_Tribe_BXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>11</td><td><strong>JewettaXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>12</td><td><strong>Law_et_alXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>13</td><td><strong>Bellevue_Deep1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>14</td><td><strong>CallowayXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>15</td><td><strong>West_Rio_Bravo1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>16</td><td><strong>Kuhn81_15</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>17</td><td><strong>Kimberlina1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>18</td><td><strong>Amalgamated_Happold2</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>19</td><td><strong>R.A._Shafter_A1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>20</td><td><strong>Del_Fortuna1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>21</td><td><strong>Russell1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>22</td><td><strong>TennecoXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>23</td><td><strong>KCL15</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>24</td><td><strong>KCL_B45</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>25</td><td><strong>USLXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>26</td><td><strong>Golden_State_VintnersXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>27</td><td><strong>MARQUIS1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>28</td><td><strong>St._Anthony1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>29</td><td><strong>XX32_15</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>30</td><td><strong>DearingerXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>31</td><td><strong>KCL_1144</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>32</td><td><strong>HayesXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>33</td><td><strong>Wiedman55_26</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>34</td><td><strong>Arkelian23_26</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>35</td><td><strong>TWIXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>36</td><td><strong>Shell_Magee_GlideXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>37</td><td><strong>PACIFIC_STATESXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>38</td><td><strong>Westates44</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>39</td><td><strong>McCulloch_Camp_et_al1_36</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>40</td><td><strong>Roberts_Cox23_1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>41</td><td><strong>KCL12</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>42</td><td><strong>Steele_Petroleum_Co4_1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>43</td><td><strong>KerrXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>44</td><td><strong>S_&_D_Killingwoth_EPM1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>45</td><td><strong>Tidewater_Capital_Co.XX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>46</td><td><strong>SUPERIOR_TENNECO_GAUTXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>47</td><td><strong>Davies1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>48</td><td><strong>Sharples_Marathon_BillingtonXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>49</td><td><strong>Mobil_Pan_Petroleum_KCL31_15</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>50</td><td><strong>Roe3</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>51</td><td><strong>Helbling1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>52</td><td><strong>Tenneco_Rio_Bravo32</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>53</td><td><strong>Tenneco_Ladd_Rio_Bravo_North87</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>54</td><td><strong>33XX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>55</td><td><strong>CURRY1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>56</td><td><strong>KCL87_25</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>57</td><td><strong>Wright_Bloemer74</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>58</td><td><strong>Kern_AXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>59</td><td><strong>RoeXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>60</td><td><strong>KCL_A58_8</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>61</td><td><strong>XXXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>62</td><td><strong>BALD_EAGLE74</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>63</td><td><strong>Cities_Service_TennecoXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>64</td><td><strong>Gow1</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>65</td><td><strong>RUSSELLXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr><tr><td>66</td><td><strong>API_BartellXX</strong></td><td>2&nbsp;curves</td><td>lith, lith_log</td></tr></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: default

    stripLog = wts.p[0].data['lith']
    stripLog





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Striplog(11 Intervals, start=0.0, stop=2892.4193799)



.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: default

    stripLog.plot()
    plt.gcf()




.. image-sg:: /examples/tutorials/images/sphx_glr_reading_well_data_001.png
   :alt: reading well data
   :srcset: /examples/tutorials/images/sphx_glr_reading_well_data_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 150x1500 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 119-121

Once we have the `WellyToSubsurfaceHelper` the function `welly_to_subsurface` will directly convert the objet to
`subsurface.UnstructuredData` -- using the trajectory module of `welly`.

.. GENERATED FROM PYTHON SOURCE LINES 123-135

.. code-block:: default

    formations = ["topo", "etchegoin", "macoma", "chanac", "mclure",
                  "santa_margarita", "fruitvale",
                  "round_mountain", "olcese", "freeman_jewett", "vedder", "eocene",
                  "cretaceous",
                  "basement", "null"]

    unstruct = welly_to_subsurface(
        wts,
        table=[Component({'lith': l}) for l in formations] # This is to keep the lithology ids constant across all the wells
    )
    unstruct





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The following boreholes failed being processed:  []

    <xarray.Dataset>
    Dimensions:       (points: 3350, XYZ: 3, cell: 3283, nodes: 2, cell_attr: 1, vertex_attr: 0)
    Coordinates:
      * points        (points) int64 0 1 2 3 4 5 6 ... 3344 3345 3346 3347 3348 3349
      * XYZ           (XYZ) <U1 'X' 'Y' 'Z'
      * cell_attr     (cell_attr) object 'lith_log'
      * vertex_attr   (vertex_attr) int64 
        UWI           (cell) object 'Ingram13_73' 'Ingram13_73' ... 'API_BartellXX'
        Depth         (cell) float64 29.43 88.28 147.1 ... 3.301e+03 3.37e+03
    Dimensions without coordinates: cell, nodes
    Data variables:
        vertex        (points, XYZ) float64 2.986e+05 3.949e+06 ... -3.297e+03
        cells         (cell, nodes) int64 0 1 1 2 2 3 ... 3347 3347 3348 3348 3349
        cell_attrs    (cell, cell_attr) int64 1 1 1 1 1 1 1 1 ... 8 8 8 11 11 11 11
        vertex_attrs  (points, vertex_attr) float64 



.. GENERATED FROM PYTHON SOURCE LINES 136-137

We can save the data into a netcdf by simply calling

.. GENERATED FROM PYTHON SOURCE LINES 137-139

.. code-block:: default

    to_netcdf(unstruct, "wells_unstructured_temp.nc")








.. GENERATED FROM PYTHON SOURCE LINES 140-141

We are done. Now the well data is a `subsurface.UnstructuredData` and can be used as usual.

.. GENERATED FROM PYTHON SOURCE LINES 143-149

.. code-block:: default

    element = sb.LineSet(unstruct)
    pyvista_mesh = sb.visualization.to_pyvista_line(element, radius=50)

    # Plot default LITH
    interactive_plot =sb.visualization.pv_plot([pyvista_mesh])




.. image-sg:: /examples/tutorials/images/sphx_glr_reading_well_data_002.png
   :alt: reading well data
   :srcset: /examples/tutorials/images/sphx_glr_reading_well_data_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pyvista/core/dataset.py:1332: PyvistaDeprecationWarning: Use of `cell_arrays` is deprecated. Use `cell_data` instead.
      warnings.warn(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.344 seconds)


.. _sphx_glr_download_examples_tutorials_reading_well_data.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: reading_well_data.py <reading_well_data.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: reading_well_data.ipynb <reading_well_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
